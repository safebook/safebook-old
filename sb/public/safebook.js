// Generated by CoffeeScript 1.6.3
(function() {
  var Contact, Key, S, Signin, User, _ref, _ref1, _ref2, _ref3, _ref4,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  S = {
    cipher: sjcl.cipher.aes,
    mode: sjcl.mode.gcm,
    curve: sjcl.ecc.curves.c384,
    armor: sjcl.codec.base64.fromBits,
    unarmor: sjcl.codec.base64.toBits,
    encrypt: function(key, data, iv) {
      var cipher;
      cipher = new S.cipher(key);
      return S.mode.encrypt(cipher, data, iv);
    },
    decrypt: function(key, data, iv) {
      var cipher;
      cipher = new S.cipher(key);
      return S.mode.decrypt(cipher, data, iv);
    },
    hide: function(key, data) {
      var iv;
      iv = sjcl.random.randomWords(4);
      return sjcl.codec.base64.fromBits(sjcl.bitArray.concat(iv, S.encrypt(key, data, iv)));
    },
    bare: function(key, data) {
      var iv;
      data = sjcl.codec.base64.toBits(data);
      iv = sjcl.bitArray.bitSlice(data, 0, 128);
      data = sjcl.bitArray.bitSlice(data, 128);
      return S.decrypt(key, data, iv);
    },
    hide_text: function(key, text) {
      return S.bare(key, sjcl.codec.utf8String.toBits(text));
    },
    bare_text: function(key, data) {
      return sjcl.codec.utf8String.fromBits(S.bare(key, text));
    },
    hide_key: function(key, data) {
      return S.hide(key, data);
    },
    bare_key: function(key, data) {
      return S.bare(key, data);
    },
    hide_seckey: function(key, seckey) {
      return S.hide(key, seckey.toBits());
    },
    bare_seckey: function(key, data) {
      return sjcl.bn.fromBits(S.bare(key, data));
    },
    auth: function(pseudo, password) {
      var cipher, pbkdf2, x00, x01;
      pseudo = sjcl.codec.utf8String.toBits(pseudo);
      password = sjcl.codec.utf8String.toBits(password);
      pbkdf2 = sjcl.misc.pbkdf2(pseudo, password);
      cipher = new S.cipher(pbkdf2);
      x00 = sjcl.codec.hex.toBits('0x00000000000000000000000000000000');
      x01 = sjcl.codec.hex.toBits('0x00000000000000000000000000000000');
      return {
        user_key: cipher.encrypt(x00),
        token: S.armor(cipher.encrypt(x01))
      };
    },
    signup: function(user_key) {
      var pubkey, seckey;
      seckey = sjcl.bn.random(this.curve.r, 6);
      pubkey = sjcl.codec.base64.fromBits(this.curve.G.mult(seckey).toBits());
      return {
        seckey: seckey,
        pubkey: pubkey,
        data: S.hide_seckey(user_key, seckey)
      };
    },
    tag: function() {
      return S.armor(sjcl.random.randomWords(8));
    },
    new_key: function(key) {
      var key_value;
      key_value = sjcl.random.randomWords(8);
      return {
        value: key_value,
        data: S.hide_key(key, key_value)
      };
    },
    get_shared: function(seckey, pubkey) {
      var point;
      point = S.curve.fromBits(sjcl.codec.base64.toBits(pubkey));
      return sjcl.hash.sha256.hash(point.mult(seckey));
    }
  };

  /*
  
    key: -> sjcl.random.randomWords(8)
  
    ec_create: ->
      seckey = sjcl.bn.random(this.curve.r, 6)
      pubkey = sjcl.codec.base64.fromBits(this.curve.G.mult(seckey).toBits())
      seckey: seckey, pubkey: pubkey
  
    ec_shared: (seckey, pubkey) ->
      point = S.curve.fromBits(sjcl.codec.base64.toBits(pubkey))
      sjcl.hash.sha256.hash point.mult(seckey)
  
  # for Safebook
  
  module?.exports = S
  */


  Key = (function(_super) {
    __extends(Key, _super);

    function Key() {
      _ref = Key.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Key.configure("Key", "tag", "user_id", "dest_id", "value", "data");

    Key.extend(Spine.Model.Ajax);

    Key.prototype.gen = function(friend) {
      var key;
      this.tag = S.tag();
      key = S.new_key(friend.shared);
      this.value = key.value;
      this.data = key.data;
      return this;
    };

    Key.prototype.toJSON = function() {
      return {
        tag: this.tag,
        user_id: this.user_id,
        dest_id: this.dest_id,
        data: this.data
      };
    };

    return Key;

  })(Spine.Model);

  Contact = (function(_super) {
    __extends(Contact, _super);

    function Contact() {
      this.get_shared = __bind(this.get_shared, this);
      _ref1 = Contact.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Contact.configure("Contact", "id", "pseudo", "pubkey", "shared");

    Contact.extend(Spine.Model.Ajax);

    Contact.prototype.url = function() {
      if (this.id != null) {
        return 'users/' + this.id;
      } else {
        return 'users';
      }
    };

    Contact.prototype.get_shared = function(seckey) {
      return this.shared = S.get_shared(seckey, this.pubkey);
    };

    return Contact;

  })(Spine.Model);

  User = (function(_super) {
    __extends(User, _super);

    function User() {
      _ref2 = User.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    User.configure("User", "id", "pseudo", "token", "user_key", "pubkey", "seckey", "data");

    User.extend(Spine.Model.Ajax);

    User.prototype.sign = function() {
      return {
        pseudo: this.pseudo,
        token: this.token
      };
    };

    User.prototype.toJSON = function() {
      return {
        pseudo: this.pseudo,
        token: this.token,
        pubkey: this.pubkey,
        data: this.data
      };
    };

    User.prototype.auth = function(pseudo, password) {
      var auth;
      this.pseudo = pseudo;
      auth = S.auth(this.pseudo, password);
      this.user_key = auth.user_key;
      return this.token = auth.token;
    };

    User.prototype.add_key = function(friend) {
      var key;
      key = new Key({
        user_id: this.id,
        dest_id: friend.id
      });
      key.gen(friend).save();
      return console.log(key);
    };

    User.prototype.signup = function(pseudo, password) {
      var up, _ref3;
      this.auth(pseudo, password);
      up = S.signup(this.user_key);
      _ref3 = [up.seckey, up.pubkey, up.data], this.seckey = _ref3[0], this.pubkey = _ref3[1], this.data = _ref3[2];
      return this.save();
    };

    User.prototype.signin = function(pseudo, password) {
      var _this = this;
      this.auth(pseudo, password);
      return $.ajax({
        type: 'POST',
        url: '/signin',
        contentType: 'application/json',
        data: JSON.stringify(this.sign()),
        dataType: 'json',
        success: function(res) {
          var key, val;
          for (key in res) {
            val = res[key];
            _this[key] = val;
          }
          _this.seckey = S.bare_seckey(_this.user_key, _this.data);
          return _this.trigger('ajaxSuccess');
        }
      });
    };

    return User;

  })(Spine.Model);

  $(function() {
    var Signin, Signup;
    Signup = (function(_super) {
      __extends(Signup, _super);

      Signup.prototype.el = $('#signup');

      function Signup() {
        this.signup = __bind(this.signup, this);
        var _this = this;
        Signup.__super__.constructor.apply(this, arguments);
        this.user = new User();
        this.user.on('ajaxSuccess', function(status, user) {
          return _this.user.id = user.id;
        });
      }

      Signup.prototype.events = {
        'click button': 'signup'
      };

      Signup.prototype.signup = function() {
        var password, pseudo;
        pseudo = $('#pseudo').val();
        password = $('#password').val();
        return this.user.signup(pseudo, password);
      };

      return Signup;

    })(Spine.Controller);
    Signin = (function(_super) {
      __extends(Signin, _super);

      Signin.prototype.el = $('#signin');

      function Signin() {
        this.add_friend = __bind(this.add_friend, this);
        this.signin = __bind(this.signin, this);
        var _this = this;
        Signin.__super__.constructor.apply(this, arguments);
        this.user = new User();
        this.user.on('ajaxSuccess', function() {
          console.log("loaded");
          return console.log(_this.user);
        });
        Contact.on('ajaxSuccess', function(a, b, xhr) {
          console.log('ajax');
          return console.log(xhr.responseText);
        });
        Contact.on('refresh', function(contact, o) {
          console.log('refresh');
          contact = contact[0];
          contact.get_shared(_this.user.seckey);
          console.log(contact);
          return _this.user.add_key(contact);
        });
      }

      Signin.prototype.events = {
        'click #login': 'signin',
        'click #add': 'add_friend'
      };

      Signin.prototype.signin = function() {
        var password, pseudo;
        console.log('signin');
        pseudo = $('#pseudo').val();
        password = $('#password').val();
        return this.user.signin(pseudo, password);
      };

      Signin.prototype.add_friend = function() {
        console.log('add_friend');
        return Contact.fetch({
          id: $('#friend').val()
        });
      };

      return Signin;

    })(Spine.Controller);
    new Signup();
    return new Signin();
  });

  Signin = (function(_super) {
    var Signup;

    __extends(Signin, _super);

    Signin.prototype.el = $('#signin');

    function Signin() {
      this.add_friend = __bind(this.add_friend, this);
      this.signin = __bind(this.signin, this);
      var _this = this;
      Signin.__super__.constructor.apply(this, arguments);
      this.user = new User();
      this.user.on('ajaxSuccess', function() {
        console.log("loaded");
        return console.log(_this.user);
      });
      Contact.on('ajaxSuccess', function(a, b, xhr) {
        console.log('ajax');
        return console.log(xhr.responseText);
      });
      Contact.on('refresh', function(contact, o) {
        console.log('refresh');
        contact = contact[0];
        contact.get_shared(_this.user.seckey);
        console.log(contact);
        return _this.user.add_key(contact);
      });
    }

    Signin.prototype.events = {
      'click #login': 'signin',
      'click #add': 'add_friend'
    };

    Signin.prototype.signin = function() {
      var password, pseudo;
      console.log('signin');
      pseudo = $('#pseudo').val();
      password = $('#password').val();
      return this.user.signin(pseudo, password);
    };

    Signin.prototype.add_friend = function() {
      console.log('add_friend');
      return Contact.fetch({
        id: $('#friend').val()
      });
    };

    Signup = (function(_super1) {
      __extends(Signup, _super1);

      Signup.prototype.el = $('#signup');

      function Signup() {
        this.signup = __bind(this.signup, this);
        var _this = this;
        Signup.__super__.constructor.apply(this, arguments);
        this.user = new User();
        this.user.on('ajaxSuccess', function(status, user) {
          return _this.user.id = user.id;
        });
      }

      Signup.prototype.events = {
        'click button': 'signup'
      };

      Signup.prototype.signup = function() {
        var password, pseudo;
        pseudo = $('#pseudo').val();
        password = $('#password').val();
        return this.user.signup(pseudo, password);
      };

      return Signup;

    })(Spine.Controller);

    return Signin;

  }).call(this, Spine.Controller);

  Contact = (function(_super) {
    __extends(Contact, _super);

    function Contact() {
      this.get_shared = __bind(this.get_shared, this);
      _ref3 = Contact.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Contact.configure("Contact", "id", "pseudo", "pubkey", "shared");

    Contact.extend(Spine.Model.Ajax);

    Contact.prototype.url = function() {
      if (this.id != null) {
        return 'users/' + this.id;
      } else {
        return 'users';
      }
    };

    Contact.prototype.get_shared = function(seckey) {
      return this.shared = S.get_shared(seckey, this.pubkey);
    };

    return Contact;

  })(Spine.Model);

  Key = (function(_super) {
    var _ref5;

    __extends(Key, _super);

    function Key() {
      _ref4 = Key.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    Key.configure("Key", "tag", "user_id", "dest_id", "value", "data");

    Key.extend(Spine.Model.Ajax);

    Key.prototype.gen = function(friend) {
      var key;
      this.tag = S.tag();
      key = S.new_key(friend.shared);
      this.value = key.value;
      this.data = key.data;
      return this;
    };

    Key.prototype.toJSON = function() {
      return {
        tag: this.tag,
        user_id: this.user_id,
        dest_id: this.dest_id,
        data: this.data
      };
    };

    (function($, S, Key) {});

    User = (function(_super1) {
      __extends(User, _super1);

      function User() {
        _ref5 = User.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      User.configure("User", "id", "pseudo", "token", "user_key", "pubkey", "seckey", "data");

      User.extend(Spine.Model.Ajax);

      User.prototype.sign = function() {
        return {
          pseudo: this.pseudo,
          token: this.token
        };
      };

      User.prototype.toJSON = function() {
        return {
          pseudo: this.pseudo,
          token: this.token,
          pubkey: this.pubkey,
          data: this.data
        };
      };

      User.prototype.auth = function(pseudo, password) {
        var auth;
        this.pseudo = pseudo;
        auth = S.auth(this.pseudo, password);
        this.user_key = auth.user_key;
        return this.token = auth.token;
      };

      User.prototype.add_key = function(friend) {
        var key;
        key = new Key({
          user_id: this.id,
          dest_id: friend.id
        });
        key.gen(friend).save();
        return console.log(key);
      };

      User.prototype.signup = function(pseudo, password) {
        var up, _ref6;
        this.auth(pseudo, password);
        up = S.signup(this.user_key);
        _ref6 = [up.seckey, up.pubkey, up.data], this.seckey = _ref6[0], this.pubkey = _ref6[1], this.data = _ref6[2];
        return this.save();
      };

      User.prototype.signin = function(pseudo, password) {
        var _this = this;
        this.auth(pseudo, password);
        return $.ajax({
          type: 'POST',
          url: '/signin',
          contentType: 'application/json',
          data: JSON.stringify(this.sign()),
          dataType: 'json',
          success: function(res) {
            var key, val;
            for (key in res) {
              val = res[key];
              _this[key] = val;
            }
            _this.seckey = S.bare_seckey(_this.user_key, _this.data);
            return _this.trigger('ajaxSuccess');
          }
        });
      };

      return User;

    })(Spine.Model);

    return Key;

  }).call(this, Spine.Model);

  $(function() {
    new Signin({
      el: $('#signin')
    });
    return new Signup({
      el: $('#signup')
    });
  });

}).call(this);
