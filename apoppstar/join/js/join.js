// Generated by CoffeeScript 1.6.3
(function() {
  var Entropy, User, entropy, hash_file, server, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Entropy = (function() {
    function Entropy() {
      var array,
        _this = this;
      this.entropy = 0;
      window.addEventListener("load", (function(e) {
        return _this.time_collector(e);
      }), false);
      window.addEventListener("mousemove", (function(e) {
        return _this.mouse_collector(e);
      }), false);
      window.addEventListener("keypress", (function(e) {
        return _this.keys_collector(e);
      }), false);
      if (window.crypto && window.crypto.getRandomValues) {
        array = new Uint32Array(32);
        window.crypto.getRandomValues(array);
        this.add(array, 1024, "getRandomValues");
      }
    }

    Entropy.prototype.add = function(value, estimate, source) {
      this.entropy += estimate;
      sjcl.random.addEntropy(value, estimate, source);
      return $("#entropy").text(this.entropy);
    };

    Entropy.prototype.time_collector = function(e) {
      return this.add((new Date()).valueOf(), 2, "loadtime");
    };

    Entropy.prototype.mouse_collector = function(e) {
      var x, y;
      x = e.x || e.clientX || e.offsetX || 0;
      y = e.y || e.clientY || e.offsetY || 0;
      return this.add([x, y], 2, "mouse");
    };

    Entropy.prototype.keys_collector = function(e) {
      var keyCode, ms;
      ms = new Date().getMilliseconds();
      keyCode = e.keyCode || e.which;
      return this.add([ms, keyCode], 2, "keys");
    };

    return Entropy;

  })();

  entropy = new Entropy();

  hash_file = function(file, callback) {
    var BLOCKSIZE, hash_slice, i, j, reader, sha;
    BLOCKSIZE = 2048;
    i = 0;
    j = Math.min(BLOCKSIZE, file.size);
    reader = new FileReader();
    sha = new sjcl.hash.sha256();
    hash_slice = function(i, j) {
      return reader.readAsArrayBuffer(file.slice(i, j));
    };
    reader.onloadend = function(e) {
      var array, bitArray;
      array = new Uint8Array(this.result);
      bitArray = sjcl.codec.bytes.toBits(array);
      sha.update(bitArray);
      if (i !== file.size) {
        i = j;
        j = Math.min(i + BLOCKSIZE, file.size);
        return setTimeout((function() {
          return hash_slice(i, j);
        }), 0);
      } else {
        return callback(sha.finalize());
      }
    };
    return hash_slice(i, j);
  };

  server = "http://0.0.0.0:4567";

  User = (function(_super) {
    __extends(User, _super);

    function User() {
      _ref = User.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    User.prototype.urlRoot = "" + server + "/users";

    User.prototype.idAttribute = 'pseudo';

    User.prototype.toJSON = function() {
      return this.omit('secret', 'seckey');
    };

    User.if_exist = function(pseudo, callback) {
      var user;
      user = new User({
        pseudo: pseudo
      });
      user.on("sync", callback);
      return user.fetch();
    };

    return User;

  })(Backbone.Model);

  Backbone.emulateJSON = true;

  $(function() {
    var Account, View, _ref1;
    Account = new User;
    View = (function(_super) {
      __extends(View, _super);

      function View() {
        _ref1 = View.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      View.prototype.el = $("#content");

      View.prototype.events = {
        'focus input': 'clean_input',
        'blur #pseudo': 'check_pseudo',
        'blur #email': 'check_email',
        'blur #password': 'check_password',
        'blur #confirm': 'check_confirm',
        'click #eat': 'click_file',
        "change #input_file": 'use_file',
        'click .next': 'signup'
      };

      View.prototype.clean_input = function(e) {
        return $(e.target).removeClass("invalid");
      };

      View.prototype.check_pseudo = function() {
        return User.if_exist($("#pseudo").val(), function() {
          return $("#pseudo").addClass("invalid");
        });
      };

      View.prototype.check_email = function() {
        if (!/^[0-9A-Za-z._%+-]+@[0-9A-Za-z.-]+\.[A-Za-z]{2,6}$/.test($("#email").val())) {
          return $("#email").addClass("invalid");
        }
      };

      View.prototype.check_password = function() {
        var pw;
        pw = $("#password").val();
        if (!(/[0-9]+/.test(pw) && /[a-z]+/.test(pw) && /[A-Z]+/.test(pw) && pw.length >= 8)) {
          return $("#password").addClass("invalid");
        }
      };

      View.prototype.check_confirm = function() {
        if ($("#password").val() !== $("#confirm").val()) {
          return $("#confirm").addClass("invalid");
        }
      };

      View.prototype.click_file = function() {
        $("#input_file").click();
        return false;
      };

      View.prototype.use_file = function(e) {
        var file;
        file = e.target.files[0];
        console.log(file.name);
        console.log(file.size);
        return hash_file(file, function(hash) {
          console.log(sjcl.codec.hex.fromBits(hash));
          return entropy.add(hash, 256, "hash");
        });
      };

      View.prototype.signup = function() {
        var email, password, pseudo,
          _this = this;
        pseudo = $("#pseudo").val();
        password = $("#password").val();
        email = $("#email").val();
        Account.set({
          pseudo: pseudo,
          email: email
        });
        Account.set(Safebook.log(pseudo, password));
        Account.set(Safebook.gen(Account.get("secret")));
        Account.on("sync", function() {
          return alert("Bravo :)");
        });
        Account.on("error", function(model, xhr) {
          var errors;
          errors = JSON.parse(xhr.responseText);
          if (errors.pseudo) {
            return console.log("pseudo");
          } else if (errors.email) {
            return console.log("email");
          }
        });
        return Account.save();
      };

      return View;

    })(Backbone.View);
    return new View;
  });

  /*
        Account.on "sync", =>
          Account.off()
  
          @undelegateEvents()
          new Two
  
        Account.on "error", (s, xhr) =>
          Account.off()
  
          res = JSON.parse xhr.response
          if res.errors.pseudo
            $("#pseudo").addClass "invalid"
          if res.errors.email
            $("#email").addClass "invalid"
  
          message = ""
          for key of res.errors
            message += key
            message += " "+msg for msg in res.errors[key]
            message += ". "
          $("#notify").text message
  
        Account.save()
  */


}).call(this);
