// Generated by CoffeeScript 1.6.3
(function() {
  var Auth, Circle, Sequelize, User, app, express, sequelize;

  Sequelize = require('sequelize');

  express = require('express');

  sequelize = new Sequelize('database', 'username', 'password', {
    dialect: 'sqlite',
    storage: 'db.sqlite'
  });

  User = sequelize.define('User', {
    pseudo: Sequelize.STRING,
    pubkey: Sequelize.STRING,
    email: Sequelize.STRING,
    token: Sequelize.STRING,
    data: Sequelize.STRING
  }, {
    timestamps: false,
    underscored: true,
    instanceMethods: {
      "public": function() {
        return Sequelize.Utils._.pick(this, 'pseudo', 'pubkey');
      },
      "private": function() {
        return Sequelize.Utils._.pick(this, 'pseudo', 'pubkey', 'data');
      }
    }
  });

  Circle = sequelize.define('Circle', {
    data: Sequelize.STRING
  }, {
    timestamps: false,
    underscored: true
  });

  User.hasMany(Circle);

  Auth = sequelize.define('Auth', {
    data: Sequelize.STRING
  }, {
    timestamps: false,
    underscored: true
  });

  User.hasMany(Auth);

  Circle.hasMany(Auth);

  app = express();

  app.use(express.json());

  app.use(express["static"]('/home/max/Clean/join-safebook/public'));

  app.get('/', function(req, res) {
    return res.redirect('/index.html');
  });

  app.post('/users', function(req, res) {
    var user;
    user = User.build(req.body);
    return user.save().success(function() {
      return res.send(user["private"]());
    }).error(function() {
      return res.end(401);
    });
  });

  app.get('/users/:pseudo', function(req, res) {
    return User.find({
      where: {
        pseudo: req.params.pseudo
      }
    }).success(function(user) {
      if (user != null) {
        console.log(user["public"]());
        return res.send(user["public"]());
      } else {
        return res.send(404, {});
      }
    });
  });

  User.sync().error((function() {
    return console.error("Can't sync User");
  }).success(function() {
    return Circle.sync().error((function() {
      return console.error("Can't sync Circle");
    }).success(function() {
      return Auth.sync().error((function() {
        return console.error("Can't sync Auth");
      }).success(function() {
        console.log("Sync ok");
        return app.listen(8000);
      }));
    }));
  }));

}).call(this);
