// Generated by CoffeeScript 1.6.3
(function() {
  var app, express, io, rooms, server;

  express = require('express');

  app = express();

  server = require('http').createServer(app);

  io = require('socket.io').listen(server);

  rooms = [];

  server.listen(22977);

  app.use('/js', express["static"](__dirname + '/src/js'));

  app.get('/main.css', function(req, res) {
    return res.sendfile(__dirname + '/src/main.css');
  });

  app.get('/*', function(req, res) {
    return res.sendfile(__dirname + '/src/index.html');
  });

  io.sockets.on('connection', function(socket) {
    var pseudo, room, sending_file;
    room = null;
    pseudo = null;
    sending_file = null;
    socket.on('create', function(data) {
      var accepted;
      if (!((data.pubkey != null) && (data.pseudo != null))) {
        return socket.emit('create', {
          ok: false,
          error: 'no pubkey or no pseudo'
        });
      } else if (rooms[socket.id] != null) {
        return socket.emit('create', {
          ok: false,
          error: 'this room already exist'
        });
      } else {
        room = socket.id;
        pseudo = data.pseudo;
        accepted = true;
        socket.join(room);
        rooms[room] = {
          pubkey: data.pubkey,
          clients: {}
        };
        rooms[room].clients[pseudo] = {
          id: socket.id,
          "in": true
        };
        return socket.emit('create', {
          ok: true,
          room: room
        });
      }
    });
    socket.on('ask', function(data) {
      if (!((data.pubkey != null) && (data.pseudo != null))) {
        return socket.emit('ask', {
          ok: false,
          error: 'no pubkey or no pseudo'
        });
      } else if (!((data.room != null) && (rooms[data.room] != null))) {
        return socket.emit('ask', {
          ok: false,
          error: 'no room with this id'
        });
      } else if (rooms[data.room].clients[data.pseudo] != null) {
        return socket.emit('ask', {
          ok: false,
          error: 'pseudo already taken'
        });
      } else {
        room = data.room;
        pseudo = data.pseudo;
        rooms[room].clients[pseudo] = {
          id: socket.id
        };
        io.sockets.socket(room).emit('asking', {
          pseudo: pseudo,
          ip: socket.handshake.address.address,
          pubkey: data.pubkey
        });
        return socket.emit('ask', {
          ok: true
        });
      }
    });
    socket.on('upload', function(data) {
      if (sending_file) {
        return socket.emit('upload', {
          ok: false
        });
      } else {
        sending_file = true;
        socket.emit('upload', {
          ok: true
        });
        return socket.broadcast.to(room).emit('download', {
          pseudo: pseudo,
          name: data.name,
          size: data.size
        });
      }
    });
    socket.on('chunk', function(data) {
      socket.broadcast.to(room).emit('chunk', data);
      return socket.emit('chunk');
    });
    socket.on('upload_end', function(data) {
      return socket.broadcast.to(room).emit('dl_end');
    });
    socket.on('confirm', function(data) {
      var client;
      if (!((room != null) && (rooms[room] != null) && room === socket.id)) {
        return socket.emit('confirmed', {
          ok: false,
          error: 'don\'t own a room'
        });
      } else if (data.hidden_key == null) {
        return socket.emit('confirmed', {
          ok: false,
          error: 'no hidden_key'
        });
      } else if (data.pseudo == null) {
        return socket.emit('confirmed', {
          ok: false,
          error: 'no pseudo'
        });
      } else if (rooms[room].clients[data.pseudo] == null) {
        return socket.emit('confirmed', {
          ok: false,
          error: 'nobody with this pseudo'
        });
      } else {
        rooms[room].clients[data.pseudo]["in"] = true;
        client = io.sockets.socket(rooms[room].clients[data.pseudo].id);
        client.join(room);
        client.emit('accepted', {
          hidden_key: data.hidden_key,
          pubkey: rooms[room].pubkey
        });
        client.broadcast.to(room).emit('joiner', {
          pseudo: data.pseudo
        });
        return socket.emit('confirmed', {
          ok: true
        });
      }
    });
    socket.on('msg', function(data) {
      if (!((room != null) && (rooms[room] != null) && (rooms[room].clients[pseudo]["in"] != null))) {
        return socket.emit('msg error');
      } else {
        return socket.broadcast.to(room).emit('msg', {
          pseudo: pseudo,
          msg: data.msg
        });
      }
    });
    return socket.on('disconnect', function() {
      if ((room != null) && (pseudo != null)) {
        if (rooms[room].clients[pseudo]["in"] != null) {
          io.sockets["in"](room).emit('disconnect', {
            pseudo: pseudo
          });
        }
        delete rooms[room].clients[pseudo];
        if (io.sockets.clients(room).length === 0) {
          return delete rooms[room];
        }
      }
    });
  });

}).call(this);
